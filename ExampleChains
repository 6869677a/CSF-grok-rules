filter {
  if [type] == "syslog" and [message] =~ "authentication failure" {
      grok {
        match => { "message", "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:host_target} sudo: pam_unix\(sudo:auth\): authentication failure; logname=%{USERNAME:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{TTY:tty} ruser=%{USERNAME:ruser} rhost=(?:%{HOSTNAME:remote_host}|\s*) user=%{USERNAME:user}" }
		add_tag => "sudo_auth_failure"
		}
	}else if [type] == "syslog" and [message] =~ "more authentication failures" {
      grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:host_target} sshd\[%{BASE10NUM}\]: PAM %{BASE10NUM} more authentication failures; logname= uid=%{BASE10NUM} euid=%{BASE10NUM} tty=ssh ruser= rhost=%{IP:src_ip} user=%{USERNAME:username}" }
          add_tag => "ssh_failed_login"	
		  }
  } else if [type] == "syslog" and [message] =~ "Failed password for invalid" {
      grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:host_target} sshd\[%{BASE10NUM}\]: Failed password for invalid user %{USERNAME:username} from %{IP:src_ip} port %{BASE10NUM:port} ssh2" }
          add_tag => "ssh_brute_force_attack"	
		  }
 } else if [type] == "syslog" and [message] =~ "Failed password for" {
      grok {
           match => { "message" =>  "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:host_target} sshd\[%{BASE10NUM}\]: Failed password for %{USERNAME:username} from %{IP:src_ip} port %{BASE10NUM:port} ssh2" }
           add_tag => "ssh_failed_login"
           }
 } else if [type] == "syslog" and [message] =~ "Accepted password" {
      grok {
          match => { "message" =>  "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:host_target} sshd\[%{BASE10NUM}\]: Accepted password for %{USERNAME:username} from %{IP:src_ip} port %{BASE10NUM:port} ssh2" }
          add_tag => "ssh_sucessful_login"
		  }
 } else if [type] == "syslog" and [message] =~ "UDP_IN" {
      grok {
          match => { "message" =>  "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:host_target} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{DATA} Firewall: %{DATA} %{DATA} IN=%{DATA:in_iface} OUT= MAC=%{DATA:mac} SRC=%{IP:src_ip} DST=%{IP:dst_ip} LEN=%{BASE10NUM} TOS=%{DATA} PREC=%{DATA} TTL=%{BASE10NUM} ID=%{BASE10NUM:id} PROTO=UDP SPT=%{BASE10NUM:s_port} DPT=%{BASE10NUM:d_port} LEN=%{BASE10NUM}" }
          add_tag => "firewall_blocked_UDP_IN"
		  }
 } else if [type] == "syslog" and [message] =~ "TCP_IN" {
      grok {
          match => { "message" =>  "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:host_target} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{DATA} Firewall: %{DATA} %{DATA} IN=%{DATA:in_iface} OUT= MAC=%{DATA:mac} SRC=%{IP:src_ip} DST=%{IP:dst_ip} LEN=%{BASE10NUM} TOS=%{DATA} PREC=%{DATA} TTL=%{BASE10NUM} ID=%{BASE10NUM:id} PROTO=TCP SPT=%{BASE10NUM:s_port} DPT=%{BASE10NUM:d_port} WINDOW=%{BASE10NUM:window} RES=%{DATA} %{DATA:handshake} URGP=%{BASE10NUM}" }
          add_tag => "firewall_blocked_TCP_IN"
		  }
  } else if [type] == "syslog" {
      grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      }
  }
}
